import json
import os

file_path = "users.json"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è JSON —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
def create_json_file(file_path, user_data):
    """
    –°–æ–∑–¥–∞—ë—Ç JSON —Ñ–∞–π–ª —Å –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π, –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    if not os.path.exists(file_path):
        print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π JSON —Ñ–∞–π–ª.")
        structured_data = {
            "users": [
                {
                    "user_id": user_id,
                    "name": name,
                    "date": "",  # –ü—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
                    "arrival_time": "",
                    "tasks": "",
                    "result": "",
                    "problems": "",
                    "comments": ""
                }
                for user_id, name in user_data.items()
            ]
        }
        with open(file_path, 'w', encoding='utf-8') as file:
            json.dump(structured_data, file, indent=4, ensure_ascii=False)
        print(f"–§–∞–π–ª {file_path} —Å–æ–∑–¥–∞–Ω.")
    else:
        print(f"–§–∞–π–ª {file_path} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
def read_json_file(file_path):
    """
    –ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å.
    """
    if os.path.exists(file_path):
        with open(file_path, 'r', encoding='utf-8') as file:
            return json.load(file)
    else:
        print(f"–§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
def save_json_file(data, file_path="users.json"):
    """
    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª.
    :param data: –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    """
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
        print("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def update_user_info(user_id, field, new_value, file_path="users.json"):
    """
    –û–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—é.
    
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param field: –ü–æ–ª–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'date', 'arrival_time', 'tasks' –∏ —Ç.–¥.).
    :param new_value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å.
    :param file_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É.
    """
    try:
        # –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞
        with open(file_path, 'r', encoding='utf-8') as f:
            data = json.load(f)

        # –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
        user_found = False
        for user in data["users"]:
            if user["user_id"] == user_id:
                # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—è
                if field == "date":
                    user["date"] = new_value  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "date"
                elif field == "arrival_time":
                    user["arrival_time"] = new_value  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "arrival_time"
                elif field == "tasks":
                    user["tasks"] = new_value  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "tasks"
                elif field == "result":
                    user["result"] = new_value  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "result"
                elif field == "problems":
                    user["problems"] = new_value  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "problems"
                elif field == "comments":
                    user["comments"] = new_value  # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ "comments"
                user_found = True
                break

        if not user_found:
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
        save_json_file(data, file_path)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

# Summary –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
def get_user_data(user_id, file_path):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    with open(file_path, 'r', encoding='utf-8') as f:
        json_data = json.load(f)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É JSON –≤ —Å–ª–æ–≤–∞—Ä—å

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id
    users = json_data.get('users', [])
    user = next((user for user in users if user['user_id'] == str(user_id)), None)
    
    if user is None:
        return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω."
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    summary = (
        f"üìã <b>–í–∞—à–∞ –ø–ª–∞–Ω–µ—Ä–∫–∞:</b>\n\n"
        f"üìÖ –î–∞—Ç–∞ –ø–ª–∞–Ω–µ—Ä–∫–∏: <b>{user.get('date', '-')}</b>\n\n"
        f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: <b>{user.get('arrival_time', '-')}</b>\n\n"
        f"üî¥ –ó–∞–¥–∞—á–∏: <b>{user.get('tasks', '-')}</b>\n\n"
        f"üü† –ò—Ç–æ–≥–∏, –ß—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ/–ß—Ç–æ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ‚úÖ‚ùå: <b>{user.get('result', '-')}</b>\n\n"
        f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: <b>{user.get('problems', '-')}</b>\n\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: <b>{user.get('comments', '-')}</b>"
    )
    
    return summary


# –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 
def clear_user_data(user_id, file_path):
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º JSON-—Ñ–∞–π–ª
    with open(file_path, 'r', encoding='utf-8') as file:
        json_data = json.load(file)

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–¥–∞–Ω–Ω—ã–º user_id
    for user in json_data.get('users', []):
        if user.get('user_id') == user_id:
            # –û—á–∏—â–∞–µ–º –ø–æ–ª—è
            user["date"] = ""
            user["arrival_time"] = ""
            user["tasks"] = ""
            user["result"] = ""
            user["problems"] = ""
            user["comments"] = ""
            break

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump(json_data, file, ensure_ascii=False, indent=4)

