# –∂—Å–æ–Ω–∫–∞ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import json
import asyncio
import logging
import sys
# –ò–º–ø–æ—Ä—Ç–∏–º –≤—Å–µ Aiogram–æ–≤—Å–∫–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
from aiogram import Bot, Dispatcher, Router, types , F 
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart , Command
from aiogram.types import Message , CallbackQuery ,FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup , InlineKeyboardMarkup , InlineKeyboardButton ,ReplyKeyboardRemove 

# time and pc 
import os
import time
from datetime import datetime
# –†–∞–±–æ—Ç–∞ —Å —Å–∞–º–æ–π json–∫–æ–π 
from workwithjson import read_json, write_json, update_user_data, clear_user_data

# dotenv 
from dotenv import load_dotenv
import os
# files import 
from states import Suggest
from states import Problem
from states import Send
from states import QUESTIONS
import buttons
from states import PlanerkaStates

# Google connected API's
import gspread
from google.oauth2.service_account import Credentials



load_dotenv("day.env")  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ .env
token = os.getenv("TOKEN")# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∏–∫–∞ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ 
group = os.getenv("group")# –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env —Ñ–∞–π–ª–∫–∏–∫–∞ –¢–æ–∫–µ–Ω –≥—Ä—É–ø–ø—ã


admin_id = 7095194058
TOKEN = f"{token}"

bot = Bot(TOKEN)
dp = Dispatcher()
router = Router()

# –í—Å–µ –∞–π–¥–∏—à–∫–∏ –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ 
Adamarid = {
    "498128668" : "–ö—É—Ä–º–µ—Ç",
    "486553403" : "–ê–π–¥–∞–π",
    "1777950440" : "–ù—É—Ä—Ç–∏–ª–µ–∫",
    "314545333" : "–ê–¥–µ–ª—å –º–æ—É—à–Ω-–¥–∏–∑–∞–π–Ω–µ—Ä",
    "1445703692" : "–≠–ª–∏–∑–∞",
    "7095194058" : "–≠–º–∏—Ä–ª–∞–Ω",
    "7388391479" : "–°–∞–Ω–∏—è",
    "6366651156" : "–ê–¥–µ–ª—å",
    "1015135651" : "–ò–±–∞–¥–∞—Ç",
    "785058663" : "–ú—É—Ä–∞—Ç",
    "475004396" : "–ê–∂–∞—Ä",
    "6316190199" : "–°—É–∞–∏–¥–∞",
    "596067209" : "–ë–æ–≥–¥–∞–Ω",
    "852617668" : "–ñ—É–º–∞–≥—É–ª—å"
}



# –°–æ–∑–¥–∞–µ–º —Å–∫–æ–ø–∏–∫
scopes = [
    "https://www.googleapis.com/auth/spreadsheets"
]

creds = Credentials.from_service_account_file("credentials.json", scopes=scopes)
client = gspread.authorize(creds)
# –ê–π–¥–∏—à–∫–∞ —Å–∞–º–æ–π —Ç–∞–±–ª–∏—Ü—ã 
sheet_id = "1_okoGuJ1fWLQ4-8eR0RlXI2ks0EmrvZG8b51jScIr38"
sheet = client.open_by_key(sheet_id) # –æ–±–µ—Ä—Ç–∫–∞ —Å–∞–º–æ–π —Ç–∞–±–ª–∏—Ü—ã , –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–µ–ª–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–µ , —Ç–æ –µ—Å—Ç—å –∫ –∫–æ—Ç–æ—Ä–æ–π –º—ã –º–æ–∂–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è 





# –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–ª–∞–Ω–µ—Ä–∫–∏ 
@dp.message(F.text.contains("–û—Ç–º–µ–Ω–∞ ‚ùå"))
async def getcanceled(message: Message,state: FSMContext):
    await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ!",reply_markup=ReplyKeyboardRemove())
    await state.clear()
    return 

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥—É–≥–ª-—Ç–∞–±–ª–∏—Ü—ã , —É–ª—É—á—à–∞–µ—Ç —á–∏—Ç–∞–µ–º–æ—Å—Ç—å —Å–∞–º–æ–≥–æ –∫–æ–¥–∞ 
def update_google_sheet(sheet, user_name, data):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ª–∏—Å—Ç–∞
        try:
            worksheet = sheet.worksheet(user_name)
        except gspread.exceptions.WorksheetNotFound:
            # –ï—Å–ª–∏ –ª–∏—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            worksheet = sheet.add_worksheet(title=user_name, rows=100, cols=10)
            headers = ['–î–∞—Ç–∞', '–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞', '–°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏', '–í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏', 
                       '–î–æ–ø –∑–∞–¥–∞—á–∏', '–ò—Ç–æ–≥', '–ü—Ä–æ–±–ª–µ–º—ã', '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏']
            worksheet.append_row(headers)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –¥–∞–Ω–Ω—ã–º–∏
        datenow = datetime.now().strftime('%Y-%m-%d')
        new_row = [
            datenow, data['arrival_time'], data['urgent_tasks'],
            data['important_tasks'], data['additional_tasks'], data['result'],
            data['problems'], data['comments']
        ]
        worksheet.append_row(new_row)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        worksheet.format('A1:H1', {"textFormat": {"bold": True}})
        worksheet.format(f'A2:H{worksheet.row_count}', {"wrapStrategy": "WRAP"})

        

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Google Sheets: {e}")
# ////////////////////////////////////////////////////////////




# –ö–Ω–æ–ø–æ—á–∫–∞ /start
@dp.message(Command("start"))
async def letsstart(message: Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b>, —è –±–æ—Ç ADAMAR –ü–ª–∞–Ω–µ—Ä–∫–∞",parse_mode="HTML")






# –ö–æ–º–∞–Ω–¥–∞ /planerka 
@dp.message(Command("planerka"))
async def start_planerka(message: Message , state : FSMContext):
    usid = message.from_user.id
    if str(usid) not in Adamarid:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    else:
        await message.answer(QUESTIONS["dateofplanerka"],reply_markup=buttons.cancel)
        await state.set_state(PlanerkaStates.dateofplanerka)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏–π
# –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ 
@dp.message(PlanerkaStates.dateofplanerka)
async def handle_dateofplanerka(message: Message, state: FSMContext):
    await state.update_data(dateofplanerka=message.text)
    await state.set_state(PlanerkaStates.arrival_time)
    await message.answer(QUESTIONS["arrival_time"])
# –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞
@dp.message(PlanerkaStates.arrival_time)
async def handle_arrival_time(message: Message, state: FSMContext):
    await state.update_data(arrival_time=message.text)
    await state.set_state(PlanerkaStates.urgent_tasks)
    await message.answer(QUESTIONS["urgent_tasks"])

 # –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ 
@dp.message(PlanerkaStates.urgent_tasks)
async def handle_urgent_tasks(message: Message, state: FSMContext):
    await state.update_data(urgent_tasks=message.text)
    await state.set_state(PlanerkaStates.important_tasks)
    await message.answer(QUESTIONS["important_tasks"])
# –í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ 
@dp.message(PlanerkaStates.important_tasks)
async def handle_important_tasks(message: Message, state: FSMContext):
    await state.update_data(important_tasks=message.text)
    await state.set_state(PlanerkaStates.additional_tasks)
    await message.answer(QUESTIONS["additional_tasks"])
    
 # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏ 
@dp.message(PlanerkaStates.additional_tasks)
async def handle_additional_tasks(message: Message, state: FSMContext):
    await state.update_data(additional_tasks=message.text)
    await state.set_state(PlanerkaStates.result)
    await message.answer(QUESTIONS["result"])
 # –ò—Ç–æ–≥
@dp.message(PlanerkaStates.result)
async def handle_problems(message: Message, state: FSMContext):
    await state.update_data(result=message.text)
    await state.set_state(PlanerkaStates.problems)
    await message.answer(QUESTIONS["problems"])

# –ü—Ä–æ–±–ª–µ–º—ã 
@dp.message(PlanerkaStates.problems)
async def handle_problems(message: Message, state: FSMContext):
    await state.update_data(problems=message.text)
    await state.set_state(PlanerkaStates.comments)
    await message.answer(QUESTIONS["comments"]) 

@dp.message(PlanerkaStates.comments)
async def handle_comments(message: Message, state: FSMContext):
    await state.update_data(comments=message.text)
    await state.set_state(PlanerkaStates.confirm)
    await message.answer(QUESTIONS["confirm"],reply_markup=buttons.quskb)

@dp.message(PlanerkaStates.confirm)
async def handle_confirm(message: Message, state: FSMContext):
    if message.text == "–î–∞":
        data = await state.get_data()
        usid = message.from_user.id
        user_name  = Adamarid[f"{usid}"]
        datenow = datetime.now().strftime('%Y-%m-%d')
        summary = (
            f"üìã <b>–í–∞—à–∞ –ø–ª–∞–Ω–µ—Ä–∫–∞:</b>\n\n"
            f"üìÖ –î–∞—Ç–∞ –ø–ª–∞–Ω–µ—Ä–∫–∏: {data.get('dateofplanerka', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: {data['arrival_time']}\n\n"
            f"üî¥ –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['urgent_tasks']}\n\n"
            f"üü† –í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['important_tasks']}\n\n"
            f"üü¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['additional_tasks']}\n\n"
            f"üöÄ –ò—Ç–æ–≥ : {data["result"]}\n\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {data['problems']}\n\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}"
        )
        summaryforteam = (
            f"üìã <b>{user_name}</b>\n\n"
            f"üìÖ –î–∞—Ç–∞ –ø–ª–∞–Ω–µ—Ä–∫–∏: {data.get('dateofplanerka', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}\n\n"
            f"‚è∞ –í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞: {data['arrival_time']}\n\n"
            f"üî¥ –°—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['urgent_tasks']}\n\n"
            f"üü† –í–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['important_tasks']}\n\n"
            f"üü¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏: {data['additional_tasks']}\n\n"
            f"üöÄ –ò—Ç–æ–≥ : {data["result"]}\n\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã: {data['problems']}\n\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: {data['comments']}"
        )
        chatidof = -1002130834445
        # -1002130834445_4
        await message.answer(summary,parse_mode="HTML",reply_markup=ReplyKeyboardRemove())
        await bot.send_message(chat_id=chatidof,text=summaryforteam,parse_mode="HTML",message_thread_id=4)
        update_google_sheet(sheet=sheet,user_name=user_name,data=data)
        print(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –¥–ª—è {user_name}")
        await state.clear()
    else:
        await message.answer("–í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –∑–∞–Ω–æ–≤–æ , –¥–∞–Ω–Ω—ã–µ –æ—á–∏—Å—Ç–∏–ª–∏—Å—å",reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return 










# –ö–Ω–æ–ø–æ—á–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏  
@dp.message(Command("send"))
async def sendtoallworkers(message: Message , state :FSMContext):
    await message.answer(f"""–ü—Ä–∏–≤–µ—Ç <b>{message.from_user.first_name}</b> 
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!""",parse_mode="HTML")
    await state.set_state(Send.allinfo)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞  
@dp.message(Send.allinfo)
async def starttospread(message: Message, state: FSMContext):
    msg = message.text
    allkyes = list(Adamarid.keys()) # –≤—Å–µ –∞–π–¥–∏—à–∫–∏ –Ω–∞—à–∏—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ , Adamar group 
    j=0
    failed_users = [] # —Å–ø–∏—Å–æ–∫ –ª—é–¥–µ–π –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        for i in allkyes:
            await bot.send_message(i,msg)
            j+=1 # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ 
    except Exception as e:
        failed_users.append(i,str(e)) # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª—é–¥–µ–π –¥–æ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ –¥–æ—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    finally:
        await asyncio.sleep(0.33)   # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    
    await message.answer(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ : {j}") # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–æ–≥–∞ –æ –∫–æ–ª-–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ 

    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–∏—Ö
    if failed_users:
        failed_list = "\n".join([f"ID: {user_id}, Error: {error}" for user_id, error in failed_users])
        await message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:\n{failed_list}")
    
    await state.clear() # –û—á–∏—â–µ–Ω–∏–µ FSM


# –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
@dp.message(Command("problem"))
async def sendproblem(message: Message,state: FSMContext):
    await message.answer("""–Ø –Ω–∏–∫–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂—É ü§ê
–ß—Ç–æ —Ç–µ–±—è –±–µ—Å–ø–æ–∫–æ–∏—Ç ? """)
    await state.set_state(Problem.problemtext) # –∂–¥–µ–º –ø—Ä–æ–±–ª–µ–º—É –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ 
@dp.message(Problem.problemtext)
async def problemisonway(message: Message, state: FSMContext):
    msg = message.text # —Å–∞–º–∞ –ø—Ä–æ–±–ª–µ–º–∞ 
    founderlist = [498128668]  # –ê–π–¥–∏  –ö—É—Ä–º–µ—Ç–∞
    for i in founderlist:
        await bot.send_message(i,f"""<b>–ü—Ä–æ–±–ª–µ–º–∞ ‚ÄºÔ∏è</b>
{msg}
""")
        await asyncio.sleep(0.33) # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    print("–í—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å !")


# –ê–Ω–æ–Ω–∏–º–Ω–æ–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
@dp.message(Command("suggest"))
async def sendsuggest(message: Message,state: FSMContext):
    await message.answer("""–Ø –Ω–∏–∫–æ–º—É –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞—Å—Å–∫–∞–∂—É ü§ê
–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å ? """)
    await state.set_state(Suggest.suggesttext) # –∂–¥–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ 
@dp.message(Suggest.suggesttext)
async def suggestonhisway(message: Message, state: FSMContext):
    msg = message.text # —Å–∞–º–∞ –ø—Ä–æ–±–ª–µ–º–∞ 
    founderlist = [498128668]  # –ê–π–¥–∏ –°–∞–Ω–∏–∏ –∏ –ö—É—Ä–º–µ—Ç–∞  [7095194058]
    for i in founderlist:
        await bot.send_message(i,f"""<b>–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ  ‚úèÔ∏è</b> 
{msg}
""",parse_mode="HTML")
        await asyncio.sleep(0.33) # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
    print("–í—Å–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å !")







    








async def main() -> None:
    
    # Initialize Bot instance with a default parse mode which will be passed to all API calls
    
    # And the run events dispatching of course bitch 
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main()) 
